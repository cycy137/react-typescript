import React from 'react';
import { TextField } from 'office-ui-fabric-react/lib/TextField';
import { DetailsList, DetailsListLayoutMode, Selection, IColumn, IDetailsRowProps, IDetailsRowStyles, DetailsRow } from 'office-ui-fabric-react/lib/DetailsList';
import { MarqueeSelection } from 'office-ui-fabric-react/lib/MarqueeSelection';
import './CustomerList.css';
import { getId, IBaseProps } from '@uifabric/utilities';
import { getTheme, mergeStyles } from 'office-ui-fabric-react/lib/Styling';
interface ITEM{
    userName:string,
    bod:string,
    contry:string,
    countryState:string,
    gender:string,
    cellphone:string
}
interface IDetailsListBasicExampleItem {
    key: number;
    name: string;
    value: number;
  }
  
interface Myprops{
    customerList:[],
    filterReuslt():void,
    serchitem:string|undefined,
    valid:boolean,
    admin:boolean
    
}
interface IDetailsListBasicExampleState {
    items: IDetailsListBasicExampleItem[];
    selectionDetails: {};
  }
  
interface Mystate{
}
interface I{
    name:any
}
const theme = getTheme();
const exampleChildClass = mergeStyles({
    display: 'block',
    marginBottom: '10px'
  });
  

class CustomerList extends React.Component<Myprops,Mystate>{
        private _columns: IColumn[];
        private _selection: Selection;
        private _allItems: IDetailsListBasicExampleItem[];

        constructor(props:any){
            super(props);   
            this._columns = [
                { key: 'column1', name: 'username', fieldName: 'userName', minWidth: 10, maxWidth: 200, isResizable: true },
                { key: 'column2', name: 'Date of Birth', fieldName: 'bod', minWidth: 20, maxWidth: 200, isResizable: true },
                { key: 'column3', name: 'Country', fieldName: 'contry', minWidth: 20, maxWidth: 200, isResizable: true },
                { key: 'column4', name: 'State', fieldName: 'countryState', minWidth: 20, maxWidth: 200, isResizable: true },
                { key: 'column5', name: 'Gender', fieldName: 'gender', minWidth: 20, maxWidth: 100, isResizable: true },
                { key: 'column6', name: 'Cellphone', fieldName: 'cellphone', minWidth: 20, maxWidth: 200, isResizable: true }
 
              ];
            this._selection = new Selection({
                onSelectionChanged: () => this.setState({ selectionDetails: this._getSelectionDetails() })
            }); 
            this.state = {
                items: this.props.customerList,
                selectionDetails: this._getSelectionDetails()
              };       
        } 
        private _getSelectionDetails(): string {
            const selectionCount = this._selection.getSelectedCount();
        
            switch (selectionCount) {
              case 0:
                return 'No items selected';
              case 1:
                return '1 item selected: ' + (this._selection.getSelection()[0] as IDetailsListBasicExampleItem).name;
              default:
                return `${selectionCount} items selected`;
            }
          }
        
        private _onRenderRow = (prop: any): JSX.Element => {
            const customStyles: Partial<IDetailsRowStyles> = {};
            if (prop.itemIndex % 2 === 0) {
              
              customStyles.root = { backgroundColor: theme.palette.themeLighterAlt };
            }
        
            return <DetailsRow {...prop}  />;
          };
        
        private _onFilter = (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, text: string): void => {
        this.setState({
            items: text ? this.props.customerList.filter((i:I) => i.name.toLowerCase().indexOf(text) > -1) : this.props.customerList
        });
        };
          
        render(){
            
            
    
            const tableControler={
                marginLeft:'auto',
                marginRight:'auto',
                borderCollapse: 'separate' as'separate',
                borderSpacing: '0px'
            }
            const serchControl=():  any => {
                return{
                    root:{                  
                       width:'17%',
                       display:'inline-block',
                       margin:20
                    }
                }
            };
            const labelControl={
                    fontSize:17,                  
            }
            const textFieldId = getId('anInput');
            const oddColorControl=()=>{
                return{
                    color:'green',
                    ':nth-child(odd)':{
                        backgroundColor: '#dddddd'
                    }
                }
            }
            const DetailControl=()=>{
                return{
                    root:{
                        textAlign:'center',

                    }
                }
            }

            if(this.props.valid && this.props.serchitem && this.props.customerList.length<1 && this.props.admin){
                console.log('second soution');
                return(              
                    <div >
                        <label htmlFor={textFieldId} style={labelControl}>serching by name:</label><TextField id={textFieldId}  onChange={this.props.filterReuslt} styles={serchControl} />   
                        <table style={tableControler}>
                            <thead >
                                <tr>
                                    <th>username</th>
                                    <th>Date of Birth</th>
                                    <th>Country</th>
                                    <th>State</th>
                                    <th>Gender</th>
                                    <th>Cellphone</th>              
                                </tr>
                            </thead>
                        </table>  
                        <h2>no match item</h2>         
                    </div>

                )
            }
            else if(this.props.valid && this.props.admin){
                return(              
                    <div >
                        <label htmlFor={textFieldId} style={labelControl}>serching by name:</label><TextField id={textFieldId}  onChange={this.props.filterReuslt} styles={serchControl} />
                        <TextField
                            className={exampleChildClass}
                            label="Filter by name:"
                            onChange={this._onFilter}
                            styles={{ root: { maxWidth: '300px' } }}
                        />
                        <MarqueeSelection selection={this._selection}>
                        <DetailsList 
                                    items={this.props.customerList}                                   
                                    setKey="set"
                                    onRenderRow={this._onRenderRow}
                                    compact={true}
                                    columns={this._columns}
                                    layoutMode={DetailsListLayoutMode.fixedColumns}


                                    selectionPreservedOnEmptyClick={true}
                        /></MarqueeSelection>
                        {/* <table  style={tableControler}>
                            <thead >
                                <tr>
                                    <th>username</th>
                                    <th>Date of Birth</th>
                                    <th>Country</th>
                                    <th>State</th>
                                    <th>Gender</th>
                                    <th>Cellphone</th>              
                                </tr>
                            </thead>
                            <tbody style={oddColorControl()}>
                                {this.props.customerList.map((item:ITEM)=>(
                                    <tr>
                                        <td>{item.userName}</td>
                                        <td>{item.bod}</td>
                                        <td>{item.contry}</td>
                                        <td>{item.countryState}</td>
                                        <td>{item.gender}</td>
                                        <td>{item.cellphone}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>            */}
                    </div>
                )
            }
            else if(this.props.valid && !this.props.admin){
                return(
                    <div>please login by administrator account!</div>
                )
            }
            else{
                console.log('it happen')
                return(
                    <div>please login first!</div>
                )
            }
            

        }
      
};

export default CustomerList;